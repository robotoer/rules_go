package rules

import (
	"fmt"
	"strings"
)

// unoResolver resolves external packages as packages in vendor/.
//
// Assumes project is structured as follows:
//
// /
//   services/
//     example-service/
//       vendor/
//         vendor.json         # If you're using govendor
//         BUILD.bazel         # Generated by gazelle
//         .../
//       your-code-here/
//       BUILD
//       .../
//     other-service/
//       vendor/
//         vendor.json         # If you're using govendor
//         BUILD.bazel         # Generated by gazelle
//         .../
//       your-code-here/
//       BUILD
//       .../
//
// When using --external=uno, you must specify entire subproject directories when
// generating BUILD files using gazelle.
type unoResolver struct{
	projRoots []string
}

func (v unoResolver) resolve(importpath, dir string) (label, error) {
	// Find which project root this is closest to. Kinda gross and error prone
	// way of finding the vendor folder for this subproject.
	projRoot := dir
	for _, root := range v.projRoots {
		if strings.HasPrefix(dir, root) {
			projRoot = root
			break
		}
	}

	return label{
		pkg:  fmt.Sprintf("%s/vendor", projRoot),
		//name: importpath + "_" + defaultLibName,
		name: importpath,
	}, nil
}
